module;

#include <cmath>
#include <numbers>
#include <iostream>

export module midnight:polar;
import :utils;

export namespace midnight
{
	struct Polar final
	{
	public :
		Polar() = default;
		Polar(const double radius, const double azimuth, const double zenith);

		inline double getRadius() const;
		inline double getAzimuth() const;
		inline double getZenith() const;
		void canonise();
		void write() const;
	
	private :
		double radius{0.0f};
		double azimuth{0.0f};
		double zenith{0.0f};
	};
}

namespace midnight
{
	Polar::Polar(const double radius, const double azimuth, const double zenith)
	: radius{radius}, azimuth{azimuth}, zenith{zenith}
	{
		canonise();
	}

	inline double Polar::getRadius() const
	{
		return radius;
	}

	inline double Polar::getAzimuth() const
	{
		return azimuth;
	}

	inline double Polar::getZenith() const
	{
		return zenith;
	}

	void Polar::write() const
	{
		std::cout << "( " << radius << " " << azimuth << " " << zenith << " )" << std::endl;
	}

	void Polar::canonise()
	{
		if(radius == 0.0f)
		{
			zenith = 0.0f;
			azimuth = 0.0f;
			return;
		}
		if(radius < 0.0f)
		{
			radius = -radius;
			azimuth += std::numbers::pi;
			zenith += std::numbers::pi;
		}
		if(zenith < 0 || zenith > std::numbers::pi)
		{
			zenith -= 2 * std::numbers::pi * std::floor(zenith / (2 * std::numbers::pi));
			if(zenith > std::numbers::pi)
			{
				azimuth += std::numbers::pi;
				zenith = std::numbers::pi - (zenith - std::numbers::pi);
			}
		}
		if(zenith < 0.0001)
		{
			azimuth = 0.0f;
		}
		else
		{
			azimuth += (std::numbers::pi);
			azimuth -= 2 * std::numbers::pi * std::floor(azimuth / (2 * std::numbers::pi));
			azimuth -= std::numbers::pi;
		}
	}
}


