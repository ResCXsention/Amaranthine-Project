module;
#include <type_traits>
#include <cmath>
#include <cassert>
#include <cstddef>
#include <cmath>
#include <array>
#include <initializer_list>
#include <iostream>

#define MIDNIGHT_ERROR_ROW_OUTRANGE "Midnight, row out of range"
#define MIDNIGHT_ERROR_COLUMN_OUTRANGE "Midnight, column out of range"
#define MIDNIGHT_ERROR_DIMENSION_MISMATCH "Midnight, matrix dimensions unworkable"
#define MIDNIGHT_ERROR_NONSQUARE "Midnight, this matrix isn't a square"

export module midnight:matrix;

export namespace midnight
{
	template<std::size_t R, std::size_t C, class T>
	struct Matrix;

	typedef Matrix<2, 1, float> Vector2;
	typedef Matrix<3, 1, float> Vector3;
	typedef Matrix<4, 1, float> Vector4;
	typedef Matrix<2, 2, float> Matrix2x2;
	typedef Matrix<3, 3, float> Matrix3x3;
	typedef Matrix<4, 4, float> Matrix4x4;

	template<std::size_t R, class T>
	float dot(const Matrix<R, 1, T> v1, const Matrix<R, 1, T> v2);
	template<std::size_t R, class T>
	float length(const Matrix<R, 1, T> v);
	template<std::size_t R, class T>
	Matrix<R, 1, T> normalise(Matrix<R, 1, T> v);
	template<class T>
	Matrix<3, 1, T> cross(const Matrix<3, 1, T> v1, const Matrix<3, 1, T> v2);

	template<class T>
	Matrix<4, 4, T> rotation(const Matrix<3, 1, T> line, const float radians);
	template<class T>
	Matrix<4, 4, T> scale(const Matrix<3, 1, T> line, const float factor);

	template<std::size_t R, std::size_t C, class T>
	bool operator==(const Matrix<R, C, T> &m1, const Matrix<R, C, T> &m2);

	template<std::size_t R, std::size_t C, class T>
	struct Matrix final
	{
	public:
		Matrix() = default;
		Matrix(const T fill);
		Matrix(const std::initializer_list<T> fill);
		Matrix(const Matrix<R, C, T> &other);
		
		Matrix<R, C, T> &operator=(const Matrix<R, C, T> &other);
		Matrix<R, C, T> &operator+=(const Matrix<R, C, T> &other);
		Matrix<R, C, T> &operator-=(const Matrix<R, C, T> &other);
		Matrix<R, C, T> &operator*=(const Matrix<R, C, T> &other);
		Matrix<R, C, T> &operator*=(const T other);
		Matrix<R, C, T> operator+(const Matrix<R, C, T> &other) const;
		Matrix<R, C, T> operator-(const Matrix<R, C, T> &other) const;
		Matrix<R, C, T> operator-() const;
		template<unsigned long OR, unsigned long OC>
		Matrix<R, OC, T> operator*(const Matrix<OR, OC, T> &other) const;
		Matrix<R, C, T> operator*(const T other) const;
		friend bool midnight::operator==(const Matrix<R, C, T> &m1, const Matrix<R, C, T> &m2);

		inline T &entry(const std::size_t r, const std::size_t c);
		inline const T &entry(const std::size_t r, const std::size_t c) const;
		inline auto &getData();
		inline const auto &getData() const;
		inline std::size_t rows() const;
		inline std::size_t columns() const;
		void write() const;

		Matrix<C, R, T> transpose() const;
		Matrix<R - 1, C - 1, T> minor(const std::size_t r, const std::size_t c) const;
		Matrix<R - 1, C - 1, T> cofactor(const std::size_t r, const std::size_t c) const;

	private:
		const std::size_t length{R * C};
		T data[C][R]{0};
	};
}

export namespace midnight
{
	template<std::size_t R, class T>
	float dot(const Matrix<R, 1, T> v1, const Matrix<R, 1, T> v2)
	{
		float mod{0.0f};
		for(int i{0}; i < R; ++i)
		{
			mod += v1.entry(i, 0) * v2.entry(i, 0);
		}
		return mod;
	}

	template<std::size_t R, class T>
	float length(const Matrix<R, 1, T> v)
	{
		return std::sqrt(dot(v, v));
	}

	template<std::size_t R, class T>
	Matrix<R, 1, T> normalise(Matrix<R, 1, T> v)
	{
		float l{length(v)};
		for(int i{0}; i < R; ++i)
		{
			v.entry(i, 0) /= l;
		}
		return v;
	}

	template<class T>
	Matrix<3, 1, T> cross(const Matrix<3, 1, T> v1, const Matrix<3, 1, T> v2)
	{
		const T x1{v1.entry(0, 0)};
		const T y1{v1.entry(1, 0)};
		const T z1{v1.entry(2, 0)};
		const T x2{v2.entry(0, 0)};
		const T y2{v2.entry(1, 0)};
		const T z2{v2.entry(2, 0)};
		return Matrix<3, 1, T>{{
			y1 * z2 - y2 * z1,
			z1 * x2 - z2 * x1,
			x1 * y2 - x2 * y1
		}};
	}

	template<class T>
	Matrix<4, 4, T> rotation(Matrix<3, 1, T> line, const float radians)
	{
		using std::sin;
		using std::cos;
		using std::pow;
		const float r{radians};
		line = normalise(line);
		const T xl{line.entry(0, 0)};
		const T yl{line.entry(1, 0)};
		const T zl{line.entry(2, 0)};
		return Matrix<4, 4, T>{{
			(static_cast<T>(pow(xl, 2)) * (1 - cos(r))) + cos(r),
			(xl * yl) * (1 - cos(r)) + (zl * sin(r)),
			(xl * zl) * (1 - cos(r)) - (yl * sin(r)),
			0,

			(xl * yl) * (1 - cos(r)) - (zl * sin(r)),
			(static_cast<T>(pow(yl, 2)) * (1 - cos(r))) + cos(r),
			(yl * zl) * (1 - cos(r)) + (xl * sin(r)),
			0,

			(xl * zl) * (1 - cos(r)) + (yl * sin(r)),
			(yl * zl) * (1 - cos(r)) - (xl * sin(r)),
			(static_cast<T>(pow(zl, 2)) * (1 - cos(r))) + cos(r),
			0,

			0, 0, 0, 1
		}};
	}

	template<class T>
	Matrix<4, 4, T> scale(Matrix<3, 1, T> line, const float factor)
	{
		using std::pow;
		line = normalise(line);
		const T xl{line.entry(0, 0)};
		const T yl{line.entry(1, 0)};
		const T zl{line.entry(2, 0)};
		const float f{factor};
		return Matrix<4, 4, T>{{
			static_cast<float>(pow(xl, 2)) * (f - 1) + 1,
			xl * yl * (f - 1),
			xl * zl * (f - 1),
			0,

			xl * yl * (f - 1),
			static_cast<float>(pow(yl, 2)) * (f - 1) + 1,
			yl * zl * (f - 1),
			0,

			xl * zl * (f - 1),
			yl * zl * (f - 1),
			static_cast<float>(pow(zl, 2)) * (f - 1) + 1,

			0, 0, 0, 1
		}};
	}
}

export namespace midnight
{
	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T>::Matrix(const T fill)
	{
		data = {fill};
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T>::Matrix(const std::initializer_list<T> fill)
	{
		unsigned long i{0}, j{0};
		for(auto e{fill.begin()}; e != fill.end(); ++e)
		{
			data[j][i] = *e;
			++j;
			if(j >= C)
			{
				++i;
				j = 0;
			}
		}
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T>::Matrix(const Matrix<R, C, T> &other)
	{
		auto otherData{other.getData()};
		for(std::size_t i{0}; i < R; ++i)
		{
			for(std::size_t j{0}; j < C; ++j)
			{
				data[j][i] = otherData[j][i];
			}
		}
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T> &Matrix<R, C, T>::operator=(const Matrix<R, C, T> &other)
	{
		auto otherData{other.getData()};
		for(std::size_t i{0}; i < R; ++i)
		{
			for(std::size_t j{0}; j < C; ++j)
			{
				data[i][j] = otherData[i][j];
			}
		}
		return *this;
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T> &Matrix<R, C, T>::operator+=(const Matrix<R, C, T> &other)
	{
		*this = *this + other;
		return *this;
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T> &Matrix<R, C, T>::operator-=(const Matrix<R, C, T> &other)
	{
		*this = *this - other;
		return *this;
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T> &Matrix<R, C, T>::operator*=(const Matrix<R, C, T> &other)
	{
		*this = *this * other;
		return *this;
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T> &Matrix<R, C, T>::operator*=(const T other)
	{
		*this = *this * other;
		return *this;
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T> Matrix<R, C, T>::operator+(const Matrix<R, C, T> &other) const
	{
		Matrix<R, C, T> mod{*this};
		auto otherData{other.getData()};
		for(std::size_t i{0}; i < R; ++i)
		{
			for(std::size_t j{0}; j < C; ++j)
			{
				mod.entry(i, j) += otherData[i][j];	
			}
		}
		return mod;
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T> Matrix<R, C, T>::operator-(const Matrix<R, C, T> &other) const
	{
		Matrix<R, C, T> mod{*this};
		auto otherData{other.getData()};
		for(std::size_t i{0}; i < R; ++i)
		{
			for(std::size_t j{0}; j < C; ++j)
			{
				mod.entry(i, j) -= otherData[i][j];	
			}
		}
		return mod;
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T> Matrix<R, C, T>::operator-() const
	{
		Matrix<R, C, T> mod{*this * -1.0f};
		return mod;
	}

	template<std::size_t R, std::size_t C, class T>
	template<unsigned long OR, unsigned long OC>
	Matrix<R, OC, T> Matrix<R, C, T>::operator*(const Matrix<OR, OC, T> &other) const
	{
		assert(C == OR && MIDNIGHT_ERROR_DIMENSION_MISMATCH);
		Matrix<R, OC, T> mod{0};
		for(std::size_t i{0}; i < R; ++i)
		{
			for(std::size_t j{0}; j < OC; ++j)
			{
				float dotResult{0.0f};
				for(std::size_t k{0}; k < C; ++k)
				{
					dotResult += entry(i, k) * other.entry(k, j);
				}
				mod.entry(i, j) = dotResult;
			}
		}
		return mod;
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R, C, T> Matrix<R, C, T>::operator*(const T other) const
	{
		Matrix<R, C, T> mod{*this};
		for(std::size_t i{0}; i < R; ++i)
		{
			for(std::size_t j{0}; j < C; ++j)
			{
				mod.entry(i, j) *= other;
			}
		}
		return mod;
	}

	template<std::size_t R, std::size_t C, class T>
	bool operator==(const Matrix<R, C, T> &m1, const Matrix<R, C, T> &m2)
	{
		for(std::size_t i{0}; i < R; ++i)
		{
			if(m1.entry(i / R, i % C) != m2.entry(i / R, i % C))
			{
				return false;
			}
		}
		return true;
	}
	
	template<std::size_t R, std::size_t C, class T>
	inline T &Matrix<R, C, T>::entry(const std::size_t r, const std::size_t c)
	{
		assert(r < R && MIDNIGHT_ERROR_ROW_OUTRANGE);
		assert(c < C && MIDNIGHT_ERROR_COLUMN_OUTRANGE);
		return data[c][r];
	}

	template<std::size_t R, std::size_t C, class T>
	inline const T &Matrix<R, C, T>::entry(const std::size_t r, const std::size_t c) const
	{
		assert(r < R && MIDNIGHT_ERROR_ROW_OUTRANGE);
		assert(c < C && MIDNIGHT_ERROR_COLUMN_OUTRANGE);
		return data[c][r];
	}

	template<std::size_t R, std::size_t C, class T>
	auto &Matrix<R, C, T>::getData()
	{
		return data;
	}

	template<std::size_t R, std::size_t C, class T>
	inline const auto &Matrix<R, C, T>::getData() const
	{
		return data;
	}

	template<std::size_t R, std::size_t C, class T>
	inline std::size_t Matrix<R, C, T>::rows() const
	{
		return R;
	}

	template<std::size_t R, std::size_t C, class T>
	inline std::size_t Matrix<R, C, T>::columns() const
	{
		return C;
	}

	template<std::size_t R, std::size_t C, class T>
	void Matrix<R, C, T>::write() const
	{
		std::cout << "{  ";
		for(int i{0}; i < R; ++i)
		{
			for(int j{0}; j < C; ++j)
			{
				std::cout << entry(i, j) << " ";
			}
			if(i < R - 1)
			{
				std::cout << "\n   ";
			}
		}
		std::cout << " }\n" << std::flush;
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<C, R, T> Matrix<R, C, T>::transpose() const
	{
		Matrix<C, R, T> mod{0};
		for(int i{0}; i < R; ++i)
		{
			for(int j{0}; j < C; ++j)
			{
				mod.entry(j, i) = entry(i, j);
			}
		}
		return mod;
	template<std::size_t R, std::size_t C, class T>
	Matrix<R - 1, C - 1, T> Matrix<R, C, T>::minor(const std::size_t r, const std::size_t c) const
	{
		static_assert(R >= 3, "MIDNIGHT_ERROR_DIMENSION_MISMATCH");
		static_assert(C >= 3, "MIDNIGHT_ERROR_DIMENSION_MISMATCH");
		static_assert(R == C, "MIDNIGHT_ERROR_NONSQUARE");
		assert(r < R && MIDNIGHT_ERROR_ROW_OUTRANGE);
		assert(c < C && MIDNIGHT_ERROR_COLUMN_OUTRANGE);
		Matrix<R - 1, C - 1, T> mod{0};
		for(std::size_t i{0}; i < R; ++i)
		{
			if(i == r)
			{
				continue;
			}
			for(std::size_t j{0}; j < C; ++j)
			{
				if(j == c)
				{
					continue;
				}
				mod.entry(i > r ? i - 1 : i, j > c ? j - 1 : j) = entry(i, j); 
			}
		}
		return mod;
	}

	template<std::size_t R, std::size_t C, class T>
	Matrix<R - 1, C - 1, T> Matrix<R, C, T>::cofactor(const std::size_t r, const std::size_t c) const
	{
		assert(R >= 3 && MIDNIGHT_ERROR_DIMENSION_MISMATCH);
		assert(C >= 3 && MIDNIGHT_ERROR_DIMENSION_MISMATCH);
		assert(R == C && MIDNIGHT_ERROR_NONSQUARE);
		return minor(r, c) * std::pow(-1, r + c);
	}

}
